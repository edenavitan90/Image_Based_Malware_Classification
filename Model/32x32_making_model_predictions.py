from keras.models import model_from_json
import pandas as pd
import numpy as np
from PIL import Image
import os
from pathlib import Path
import sys

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
np.set_printoptions(threshold=sys.maxsize)

malware_family = ["Adialer.C", "Agent.FYI", "Allaple.A", "Allaple.L", "Alueron.gen!J", "Autorun.K", "C2LOP.gen!g",
                  "C2LOP.P", "Dialplatform.B", "Dontovo.A", "Fakerean", "Instantaccess", "Lolyda.AA1", "Lolyda.AA2",
                  "Lolyda.AA3", "Lolyda.AT", "Malex.gen!J", "Obfuscator.AD", "Rbot!gen", "Skintrim.N", "Swizzor.gen!E",
                  "Swizzor.gen!I", "VB.AT", "Wintrim.BX", "Yuner.A"]

malware_family__1 = {"Adialer.C": 0, "Agent.FYI": 1, "Allaple.A": 2, "Allaple.L": 3, "Alueron.gen!J": 4, "Autorun.K": 5,
                   "C2LOP.gen!g": 6,
                   "C2LOP.P": 7, "Dialplatform.B": 8, "Dontovo.A": 9, "Fakerean": 10, "Instantaccess": 11,
                   "Lolyda.AA1": 12, "Lolyda.AA2": 13,
                   "Lolyda.AA3": 14, "Lolyda.AT": 15, "Malex.gen!J": 16, "Obfuscator.AD": 17, "Rbot!gen": 18,
                   "Skintrim.N": 19, "Swizzor.gen!E": 20,
                   "Swizzor.gen!I": 21, "VB.AT": 22, "Wintrim.BX": 23, "Yuner.A": 24}

# Load the json file that contains the model's structure
f = Path("32x32_model_structure.json")
model_structure = f.read_text()

# Recreate the Keras model object from the json data
model = model_from_json(model_structure)

# Re-load the model's trained weights
model.load_weights("32x32_model_weights.h5")

# Load an image file to test, resizing it to 32x32 pixels (as required by this model)
# img = image.load_img("test_Adialer.C_32x32.png", target_size=(32, 32))
# img = Image.open("test1_Allaple.A_32x32.png")
data = pd.read_excel("../Dataset And Mapping/mapped-32x32-data.xlsx")
testing_data_matrix = []
for el in np.array(data):
    if el[3] == "testing":
        testing_data_matrix.append(el)

x_test = []
y_test = []
i = 0
for it in testing_data_matrix:
    i += 1
    im = Image.open(fr"../Dataset And Mapping/{it[1]}")
    x_test.append(np.expand_dims((np.array(im) / 255), axis=2))
    # x_test = np.expand_dims((np.array(im) / 255), axis=2)

    # y_test_temp = np.zeros(len(malware_family))
    # y_test_temp[malware_family1[it[2]]] = 1
    # y_test.append(y_test_temp)
    y_test.append(malware_family__1[it[2]])
    print(i)

y_test = np.array(y_test)

# Convert the image to a numpy array
# image_to_test = image.img_to_array(img)
# image_to_test = np.expand_dims((np.array(img) / 255), axis=2)

# print(image_to_test.shape)


# Add a fourth dimension to the image (since Keras expects a list of images, not a single image)
# list_of_images = np.expand_dims(image_to_test, axis=0)
# list_of_images = np.expand_dims(x_test, axis=0)

# Make a prediction using the model
# results = model.predict(list_of_images)
# print(np.array(x_test).shape)
results = np.array(model.predict(np.array(x_test)))

# Since we are only testing one image, we only need to check the first result
# single_result = results[0]

# We will get a likelihood score for all 10 possible classes. Find out which class had the highest score.
# most_likely_class_index = int(np.argmax(single_result))
most_likely_class_indexes = np.argmax(results, axis=1)

results_comparison = most_likely_class_indexes == y_test
false_identification_indexes = np.where(np.logical_not(np.array(results_comparison)))[0]
print(false_identification_indexes)
count_true = np.count_nonzero(np.array(results_comparison))
print(count_true)
print(count_true / len(results_comparison))
print("y_test[:]")
print("Attention can be paid to the family which has the largest number of errors in identification:")
print(y_test[false_identification_indexes])
print(np.array(malware_family)[y_test[false_identification_indexes]])
print(np.argmax(results[false_identification_indexes][0]))

# print(most_likely_class_indexes)
# print(results.shape)
# print(most_likely_class_indexes.shape)
# print(len(most_likely_class_index))
# class_likelihood = single_result[most_likely_class_index]

# Get the name of the most likely class
# class_label = malware_family[most_likely_class_index]

# Print the result
# print("This is image is a {} - Likelihood: {:2f}".format(class_label, class_likelihood))
# print(len(results))
# print(results)
