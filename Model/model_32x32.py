import pandas as pd
import sys
import numpy as np
from PIL import Image
from keras.models import Sequential
from keras.layers import *
import os
from pathlib import Path

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
malware_family = {"Adialer.C": 0, "Agent.FYI": 1, "Allaple.A": 2, "Allaple.L": 3, "Alueron.gen!J": 4, "Autorun.K": 5, "C2LOP.gen!g": 6,
                  "C2LOP.P": 7, "Dialplatform.B": 8, "Dontovo.A": 9, "Fakerean": 10, "Instantaccess": 11, "Lolyda.AA1": 12, "Lolyda.AA2": 13,
                  "Lolyda.AA3": 14, "Lolyda.AT": 15, "Malex.gen!J": 16, "Obfuscator.AD": 17, "Rbot!gen": 18, "Skintrim.N": 19, "Swizzor.gen!E": 20,
                  "Swizzor.gen!I": 21, "VB.AT": 22, "Wintrim.BX": 23, "Yuner.A": 24}

np.set_printoptions(threshold=sys.maxsize)
data = pd.read_excel("../Dataset And Mapping/mapped-32x32-data.xlsx")

training_data_matrix = []
for el in np.array(data):
    if el[3] == "training":
        training_data_matrix.append(el)

x_train = []
y_train = []
i = 0
for it in training_data_matrix:
    i += 1
    im = Image.open(fr"../Dataset And Mapping/{it[1]}")

    x_train.append(np.expand_dims((np.array(im) / 255), axis=2))
    # x_train.append(np.array(im) / 255)
    # x_train.append(np.ravel(np.array(im) / 255))

    y_temp = np.zeros(len(malware_family))
    y_temp[malware_family[it[2]]] = 1

    # y_temp = np.expand_dims(y_temp, axis=1)

    y_train.append(y_temp)
    # print(np.array(im).shape)
    # print(y_temp.shape)
    print(i)

# Define the model:
model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same', input_shape=(32, 32, 1), activation="relu"))
# model.add(Conv2D(32, (3, 3), padding='same', input_shape=(32, 32, 1), activation="relu"))
model.add(Conv2D(32, (3, 3), activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same', activation="relu"))
model.add(Conv2D(64, (3, 3), activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512, activation="relu"))
model.add(Dropout(0.5))
model.add(Dense(len(malware_family), activation="softmax"))

model.summary()
# y_train = np.expand_dims(y_train, axis=1)
# x_train = np.expand_dims(x_train, axis=3)
print(np.array(x_train).shape)
print(np.array(y_train).shape)

# Compile the model
# model.compile(loss="mse", optimizer="adam")
model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

testing_data_matrix = []
for el in np.array(data):
    if el[3] == "testing":
        testing_data_matrix.append(el)

x_test = []
y_test = []
i = 0
for it in testing_data_matrix:
    i += 1
    im = Image.open(fr"../Dataset And Mapping/{it[1]}")
    # x_test.append(np.ravel(np.array(im) / 255))
    # x_test.append(np.array(im) / 255)
    x_test.append(np.expand_dims((np.array(im) / 255), axis=2))
    y_test_temp = np.zeros(len(malware_family))
    y_test_temp[malware_family[it[2]]] = 1
    y_test.append(y_test_temp)
    print(i)

# Train the model:
model.fit(
    np.array(x_train),
    np.array(y_train),
    batch_size=32,
    # batch_size=60,
    epochs=10,
    # epochs=50,
    # validation_data=(np.array(x_test), np.array(y_test)),
    shuffle=True,
    verbose=2
)

# test_error_rate = model.evaluate(np.array(x_test), np.array(y_test), verbose=0)
# print(r"The MSE for the test data is: {}".format(test_error_rate))

# images_path = training_data[['Image Path']].values
# images_family = training_data[['Malware Family']].values


# Save neural network structure
model_structure = model.to_json()
f = Path("artifacts/32x32/32x32_model_structure_10_epochs.json")
f.write_text(model_structure)

# Save neural network's trained weights
model.save_weights("artifacts/32x32/32x32_model_weights_10_epochs.h5")

