import pandas as pd
import sys
import numpy as np
from PIL import Image
from keras.models import Sequential
from keras.layers import *
import os

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
malware_family = {"Adialer.C": 0, "Agent.FYI": 1, "Allaple.A": 2, "Allaple.L": 3, "Alueron.gen!J": 4, "Autorun.K": 5, "C2LOP.gen!g": 6,
                  "C2LOP.P": 7, "Dialplatform.B": 8, "Dontovo.A": 9, "Fakerean": 10, "Instantaccess": 11, "Lolyda.AA1": 12, "Lolyda.AA2": 13,
                  "Lolyda.AA3": 14, "Lolyda.AT": 15, "Malex.gen!J": 16, "Obfuscator.AD": 17, "Rbot!gen": 18, "Skintrim.N": 19, "Swizzor.gen!E": 20,
                  "Swizzor.gen!I": 21, "VB.AT": 22, "Wintrim.BX": 23, "Yuner.A": 24}

np.set_printoptions(threshold=sys.maxsize)
data = pd.read_excel("../Dataset And Mapping/mapped-32x32-data.xlsx")

training_data_matrix = []
for el in np.array(data):
    if el[3] == "training":
        training_data_matrix.append(el)

X = []
Y = []
i = 0
for it in training_data_matrix:
    i += 1
    im = Image.open(fr"../Dataset And Mapping/{it[1]}")
    X.append(np.ravel(np.array(im) / 255))
    y_temp = np.zeros(len(malware_family))
    y_temp[malware_family[it[2]]] = 1
    Y.append(y_temp)
    print(i)


# Define the model:
model = Sequential()
model.add(Dense(50, input_dim=32*32, activation='relu'))
#model.add(Dense(100, input_shape=32*32, activation="relu"))
model.add(Dense(len(malware_family), activation="softmax"))

model.summary()
print(len(X))
print(len(Y))
#model.add(Dense(50, activation='relu'))
#model.add(Dense(len(malware_family), activation='softmax'))
model.compile(loss="mse", optimizer="adam")

# Train the model:
model.fit(
    X,
    Y,
    epochs=50,
    shuffle=True,
    verbose=2
)

testing_data_matrix = []
for el in np.array(data):
    if el[3] == "testing":
        testing_data_matrix.append(el)

X_test = []
Y_test = []
i = 0
for it in testing_data_matrix:
    i += 1
    im = Image.open(fr"../Dataset And Mapping/{it[1]}")
    X_test.append(np.ravel(np.array(im) / 255))
    y_test_temp = np.zeros(len(malware_family))
    y_test_temp[malware_family[it[2]]] = 1
    Y_test.append(y_test_temp)
    print(i)

test_error_rate = model.evaluate(X_test, Y_test, verbose=0)
print(r"The MSE for the test data is: {}".format(test_error_rate))
#images_path = training_data[['Image Path']].values
#images_family = training_data[['Malware Family']].values


