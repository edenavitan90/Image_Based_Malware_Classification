import pandas as pd
import sys
import numpy as np
from PIL import Image
from keras.models import Sequential
from keras.layers import *
import os
from pathlib import Path
from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn import metrics
import matplotlib.pyplot as plt

malware_family = {"Adialer.C": 0, "Agent.FYI": 1, "Allaple.A": 2, "Allaple.L": 3, "Alueron.gen!J": 4, "Autorun.K": 5, "C2LOP.gen!g": 6,
                  "C2LOP.P": 7, "Dialplatform.B": 8, "Dontovo.A": 9, "Fakerean": 10, "Instantaccess": 11, "Lolyda.AA1": 12, "Lolyda.AA2": 13,
                  "Lolyda.AA3": 14, "Lolyda.AT": 15, "Malex.gen!J": 16, "Obfuscator.AD": 17, "Rbot!gen": 18, "Skintrim.N": 19, "Swizzor.gen!E": 20,
                  "Swizzor.gen!I": 21, "VB.AT": 22, "Wintrim.BX": 23, "Yuner.A": 24}

malware_family1 = ["Adialer.C", "Agent.FYI", "Allaple.A", "Allaple.L", "Alueron.gen!J", "Autorun.K", "C2LOP.gen!g",
                  "C2LOP.P", "Dialplatform.B", "Dontovo.A", "Fakerean", "Instantaccess", "Lolyda.AA1", "Lolyda.AA2",
                  "Lolyda.AA3", "Lolyda.AT", "Malex.gen!J", "Obfuscator.AD", "Rbot!gen", "Skintrim.N", "Swizzor.gen!E",
                  "Swizzor.gen!I", "VB.AT", "Wintrim.BX", "Yuner.A"]

data = pd.read_excel("../../Dataset And Mapping/mapped-32x32-data.xlsx")

X = []
Y = []

i = 0
for el in np.array(data):
    im = Image.open(fr"../../Dataset And Mapping/{el[1]}")
    X.append(np.array(im).flatten() / 255)
    Y.append( malware_family[el[2]])
    i += 1
    print(i)

print(np.array(Y).shape)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.1)
clf = LinearDiscriminantAnalysis()
clf.fit(
    x_train,
    y_train
)

# Train
y_hat_train = clf.predict(x_train)
cm_train = metrics.confusion_matrix(y_train, y_hat_train)
print(cm_train)

print(np.array(cm_train).shape)

class_names = np.array(malware_family1)


print(class_names.shape)
metrics.ConfusionMatrixDisplay(cm_train, display_labels=class_names).plot()
plt.title('Train data confusion matrix')
plt.xticks(rotation=90)
# Test

